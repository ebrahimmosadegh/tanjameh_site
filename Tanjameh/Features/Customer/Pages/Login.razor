@page "/account/login"

@layout AccountLayout

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Tanjameh.Features.Account
@using Tanjameh.Features.Account.Shared
@using Tanjameh.Features.Customer.Models
@using Tanjameh.Features.ShoppingCart.Services

@inject Tanjameh.Features.Customer.Services.AuthenticationService AuthService
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ProtectedSessionStorage ProtectedSessionStore


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <h3 class="text-center">@Localization.LoginTitle</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <EditForm Model="@Input" method="post" OnValidSubmit="HandleLogin" FormName="login">
                        <DataAnnotationsValidator />


                        <div class="form-group mb-3 @(!string.IsNullOrEmpty(Email) && IsNew == 1?"hide-email" : "")">
                            <label for="email">@Localization.Email</label>
                            <InputText id="email" class="form-control" @bind-Value="Input.Email" autocomplete="username" aria-required="true" />
                            <ValidationMessage For="@(() => Input.Email)" />
                        </div>



                        <div class="form-group  mb-3">
                            <label for="password">@Localization.Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="Input.Password" utocomplete="current-password" aria-required="true" />
                            <ValidationMessage For="@(() => Input.Password)" />
                        </div>

                        <button type="submit" class="btn btn-primary btn-block mt-3">@Localization.Login</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public const string SuccessLogin = "SuccessLogin";

    [SupplyParameterFromForm]
    private LoginModel Input { get; set; } = new();

    private string errorMessage;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery(Name = "email")]
    private string? Email { get; set; }

    [SupplyParameterFromQuery(Name = "new")]
    private int? IsNew { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = null;

        if (!string.IsNullOrEmpty(Email))
        {
            Input.Email = Email;
        }
        if (string.IsNullOrWhiteSpace(Input.Email) || string.IsNullOrWhiteSpace(Input.Password))
        {
            errorMessage = "لطفاً ایمیل و رمز عبور را وارد کنید.";
            return;
        }

        var result = await AuthService.LoginAsync(Input.Email, Input.Password);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = true });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "ورود ناموفق بود. لطفاً ایمیل و رمز عبور خود را بررسی کنید.";
        }

    }
}

<style>
    .hide-email {
        opacity: 0;
        max-height: 0 !important;
    }
</style>